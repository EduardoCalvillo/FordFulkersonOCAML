open Graph
let parcour graph s t=
let rec loop acc head neighboors=
if head <> t then
match neighboors with
|[]-> failwith "cul de sac"
|(id,a)::nx->if (List.for_all ((!=) id) acc && a!=0) then loop (id::acc) id (out_arcs graph id) else loop acc head nx 
else
List.rev(acc)
in
loop [s] s (out_arcs graph s)

let find_delta gr chemin=
 let d=1000 in  (*find_arc gr chemin[0] chemin[1] in on prend delta = a la valeur min de cout-flow du premier arc par dÃ©faut*)
 let rec loop delta list=match list with
 |[]->delta
 |x::[]->delta
 |x::y::nxt->match (find_arc gr x y) with
  |None->failwith "Oops"
  |Some v-> if (v < delta) then loop v (y::nxt) else loop delta (y::nxt)
in
loop d chemin

(*
 let rec loop delta list=match list with
 |[]->delta
 |x::[]->delta
 |x::y::nxt->match (find_arc gr x y), (find_arc gr y x) with
  |None,None->failwith "Oops"
  |None, Some w->if (w < delta) then loop w (y::nxt) else loop delta (y::nxt)
  |Some v, None-> if (v < delta) then loop v (y::nxt) else loop delta (y::nxt)
  |Some v, Some w-> if ((Pervasives.min v w)  < delta) then loop (Pervasives.min v w) (y::nxt) else loop delta (y::nxt)
in
loop d chemin

 *)


let update graph delta chemin=
 let rec loop gr d list=match list with
 |[]->gr
 |x::[]->gr
 |x::y::nxt->match (find_arc gr x y),(find_arc gr y x) with
  |None, _->failwith "Oops"
  |Some v, None-> loop (add_arc (add_arc gr y x (d)) x y (v-d)) d (y::nxt)
  |Some v,Some w-> loop (add_arc (add_arc gr y x (w+d)) x y (v-d)) d (y::nxt)
in 
 loop graph delta chemin
